# coding=utf-8
"""
Django settings for wanheapi project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import mimetypes
import datetime

# 用于django 的 runserver 命令, 在对svg图像是返回 octet-stream 导致图片不能显示的问题
mimetypes.add_type("image/svg+xml", ".svg", True)
mimetypes.add_type("image/svg+xml", ".svgz", True)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'lxo*ae_dlrihc3=^k)9%z_-z@c3@gm)zc*&r*n1h=2$bsxgs!3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'rest_framework_jwt',
    'tg',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
# 这里指定允许的域名, 当使用 X_FRAME_OPTIONS 为 ALLOWALL
# X_FRAME_OPTIONS = 'ALLOWALL'
# CORS_ORIGIN_WHITELIST = (
#     'demo.wajinzi.me',
# )
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'wanheapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wanheapi.wsgi.application'


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'UTC'
USE_I18N = True
LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale')]
USE_L10N = True
USE_TZ = True
DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = 'media/'  # absolute path
MEDIA_URL = '/images/'

# email配置
DEFAULT_FROM_EMAIL = 'support@myquant.cn'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = False
EMAIL_HOST = ''
EMAIL_PORT = 587
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'whapi.log',
        },
        'jobfile': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'jobfile.log',
        },
        'sqlfile': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'sql.log',
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file'],
            'propagate': False,
            'level': 'INFO',
        },
        'wh': {
            'handlers': ['file'],
            'propagate': False,
            'level': 'INFO',
        },
    },
}

# cache
# https://docs.djangoproject.com/en/1.10/ref/settings/#s-caches
# https://docs.djangoproject.com/en/1.10/topics/cache/#s-memcached
# 这里提供 memcached 的 key 的hash处理. 因为memcached 对key 的长度要求为不超过250个字符
# 具体参见: http://www.tuicool.com/articles/b6Nji2
# http://suchalin.blog.163.com/blog/static/55304677201191224612650/ value值不能超过1M
# https://docs.djangoproject.com/en/1.8/topics/cache/#s-cache-key-warnings


def memcached_hash_key(key, key_prefix, version):
    new_key = ':'.join([key_prefix, str(version), key])
    if len(new_key) > 248:
        import hashlib
        m = hashlib.md5()
        m.update(new_key)
        new_key = m.hexdigest()

    return new_key

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'tg.authentication.JSONWebTokenAuthenticationUri',
        'rest_framework.authentication.SessionAuthentication',
        # 'tg.authentication.UnsafeSessionAuthentication',  # 指定特定的参数不进行csrf的检查
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'tg.pagination.PageNumberPaginationWithPageSize',
    'DATE_FORMAT': '%Y-%m-%d',
    'DATE_INPUT_FORMATS': ('iso-8601', '%Y-%m-%d',),

    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DATETIME_INPUT_FORMATS': ('iso-8601', '%Y-%m-%d %H:%M:%S'),

    'TIME_FORMAT': '%H:%M:%S',
    'TIME_INPUT_FORMATS': ('iso-8601', '%H:%M:%S',),
    # Exception handling
    'EXCEPTION_HANDLER': 'tg.views.my_exception_handler',
}

JWT_AUTH = {
    'JWT_PAYLOAD_HANDLER': 'tg.utils.jwt_payload_handler',
    'JWT_PAYLOAD_GET_USER_ID_HANDLER': 'tg.utils.jwt_get_user_id_from_payload_handler',
    'JWT_PAYLOAD_GET_USERNAME_HANDLER': 'tg.utils.jwt_get_username_from_payload_handler',
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'tg.utils.jwt_response_payload_handler',
    'JWT_ALLOW_REFRESH': True,
    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=2),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=1),
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
}

# 关于用户认证, 也就是django.contrib.auth.authenticate 会调用的背后的认证
# 就用django默认的用户体系, 这个值不要改
AUTH_USER_MODEL = 'tg.UserInfo'
AUTHENTICATION_BACKENDS = ('django.contrib.auth.backends.ModelBackend', 'tg.authbackends.MobileBackend',)
